<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Simple FPS Game</title>
  <style>
    html, body { margin: 0; overflow: hidden; font-family: sans-serif; background: black; }
    canvas { display: block; }
    #instructions {
      position: absolute;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.7);
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 24px;
      z-index: 10;
      cursor: pointer;
    }
    #hud {
      position: absolute;
      top: 10px;
      left: 10px;
      color: white;
      z-index: 5;
    }
    #ammo {
      position: absolute;
      bottom: 10px;
      right: 20px;
      color: white;
      font-size: 20px;
    }
  </style>
</head>
<body>
<div id="instructions">Click to Start</div>
<div id="hud">
  <div id="hp">HP: 100</div>
  <div id="weapon">Weapon: SMG (1)</div>
</div>
<div id="ammo">Ammo: 35 / 35</div>

<script src="https://cdn.jsdelivr.net/npm/three@0.158.0/build/three.min.js"></script>
<script>
  let camera, scene, renderer, controls;
  let ammo = { 1: 35, 2: 15, 3: 3 }, maxAmmo = { 1: 35, 2: 15, 3: 3 };
  let hp = 100, currentWeapon = 1, lastShot = 0, isReloading = false;
  const weapons = {
    1: { name: "SMG", fireRate: 100, damage: 10 },
    2: { name: "Shotgun", fireRate: 600, damage: 5, pellets: 5 },
    3: { name: "Sniper", fireRate: 1000, damage: 50 }
  };
  const hud = {
    hp: document.getElementById('hp'),
    weapon: document.getElementById('weapon'),
    ammo: document.getElementById('ammo')
  };

  init();
  animate();

  function init() {
    scene = new THREE.Scene();
    scene.background = new THREE.Color(0x202020);
    camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 1000);
    renderer = new THREE.WebGLRenderer();
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(renderer.domElement);

    // Set up light
    const light = new THREE.DirectionalLight(0xffffff, 1);
    light.position.set(0, 10, 10);
    scene.add(light);

    // Pointer Lock Controls
    controls = new THREE.PointerLockControls(camera, document.body);

    // Start the game on click
    document.getElementById('instructions').addEventListener('click', () => {
      document.getElementById('instructions').style.display = 'none'; // Hide instruction screen
      controls.lock(); // Lock the pointer
      startGame(); // Initialize game mechanics
    });

    controls.getObject().position.set(0, 2, 5);
    scene.add(controls.getObject());

    // Event listeners
    document.addEventListener('click', shoot);
    document.addEventListener('keydown', e => {
      if (["1", "2", "3"].includes(e.key)) {
        currentWeapon = parseInt(e.key);
        updateHUD();
      }
      if (e.key.toLowerCase() === "r" && !isReloading) {
        isReloading = true;
        setTimeout(() => {
          ammo[currentWeapon] = maxAmmo[currentWeapon];
          isReloading = false;
          updateHUD();
        }, 2000);  // 2 seconds reload time
      }
    });

    updateHUD();
  }

  function startGame() {
    updateHUD(); // Update HUD after game start
  }

  function shoot() {
    if (isReloading) return; // Can't shoot while reloading

    const now = Date.now();
    const weapon = weapons[currentWeapon];
    if (now - lastShot < weapon.fireRate || ammo[currentWeapon] <= 0) return;
    lastShot = now;
    ammo[currentWeapon]--;

    console.log("Shot fired! Weapon:", weapon.name);
    updateHUD();
  }

  function updateHUD() {
    hud.hp.textContent = "HP: " + hp;
    hud.weapon.textContent = `Weapon: ${weapons[currentWeapon].name} (${currentWeapon})`;
    hud.ammo.textContent = `Ammo: ${ammo[currentWeapon]} / ${maxAmmo[currentWeapon]}`;
  }

  function animate() {
    requestAnimationFrame(animate);
    renderer.render(scene, camera);
  }
</script>
</body>
</html>
